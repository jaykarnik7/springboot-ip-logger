name: Build and Deploy Spring Boot to EC2

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: 📦 Checkout repository
      uses: actions/checkout@v4

    - name: ☕ Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: 🛠️ Build with Maven
      run: mvn clean package -DskipTests

    - name: 🚚 Copy JAR to EC2
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        source: "target/*.jar"
        target: "/home/${{ secrets.EC2_USER }}/springboot-app/"
        strip_components: 1
        overwrite: true

    - name: 🔁 Deploy with systemd
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        timeout: 30s
        command_timeout: 10m
        script: |
          echo "🔍 Setting up Resource-Constrained Spring Boot application with systemd and New Relic..."
          cd /home/${{ secrets.EC2_USER }}/springboot-app/
          
          # Find the JAR file
          JAR_FILE=$(ls -1 *.jar | head -1)
          if [ -z "$JAR_FILE" ]; then
            echo "❌ No JAR file found in $(pwd)!"
            ls -la
            exit 1
          fi
          echo "📦 Found JAR file: $JAR_FILE"
          
          # Check if New Relic agent exists
          if [ ! -f "/opt/newrelic/newrelic.jar" ]; then
            echo "❌ New Relic agent not found at /opt/newrelic/newrelic.jar!"
            echo "Please ensure New Relic is installed in /opt/newrelic/"
            exit 1
          fi
          echo "📦 Found New Relic agent at /opt/newrelic/newrelic.jar"
          
          # Get the full paths
          JAR_PATH="/home/${{ secrets.EC2_USER }}/springboot-app/$JAR_FILE"
          NEWRELIC_PATH="/opt/newrelic/newrelic.jar"
          
          # Stop the existing service if it's running
          echo "🛑 Stopping existing springboot-app service..."
          sudo systemctl stop springboot-app || echo "Service was not running"
          
          # Create the systemd service file with New Relic agent and CONSTRAINED RESOURCES
          echo "📝 Creating systemd service file with New Relic integration and resource constraints for bottleneck testing..."
          sudo tee /etc/systemd/system/springboot-app.service > /dev/null <<EOF
          [Unit]
          Description=Resource-Constrained Spring Boot Application with New Relic
          After=network.target
          Wants=network.target
          
          [Service]
          Type=simple
          User=${{ secrets.EC2_USER }}
          Group=${{ secrets.EC2_USER }}
          WorkingDirectory=/home/${{ secrets.EC2_USER }}/springboot-app
          ExecStart=/usr/bin/java -javaagent:$NEWRELIC_PATH -Xmx150m -Xms75m -XX:MaxMetaspaceSize=64m -Dspring.profiles.active=prod -jar $JAR_PATH
          ExecStop=/bin/kill -15 \$MAINPID
          Restart=always
          RestartSec=10
          KillMode=mixed
          KillSignal=SIGTERM
          TimeoutStopSec=30
          StandardOutput=journal
          StandardError=journal
          SyslogIdentifier=springboot-app
          
          # Environment variables
          Environment=JAVA_HOME=/usr/lib/jvm/java-17-amazon-corretto
          Environment=NEW_RELIC_CONFIG_FILE=/opt/newrelic/newrelic.yml
          
          # Resource constraints for bottleneck testing
          MemoryMax=200M
          CPUQuota=40%
          
          [Install]
          WantedBy=multi-user.target
          EOF
          
          # Set proper permissions on the service file
          sudo chmod 644 /etc/systemd/system/springboot-app.service
          
          # Reload systemd daemon to recognize the new service
          echo "🔄 Reloading systemd daemon..."
          sudo systemctl daemon-reload
          
          # Enable the service to start on boot
          echo "⚡ Enabling service to start on boot..."
          sudo systemctl enable springboot-app
          
          # Start the service
          echo "🚀 Starting resource-constrained springboot-app service with New Relic..."
          sudo systemctl start springboot-app
          
          # Wait a moment for the service to start
          echo "⏳ Waiting for service to start..."
          sleep 20
          
          # Check service status
          echo "📊 Service status:"
          sudo systemctl status springboot-app --no-pager -l
          
          # Show recent logs
          echo "📄 Recent application logs:"
          sudo journalctl -u springboot-app -n 30 --no-pager
          
          # Test if the application is responding
          echo "🌐 Testing application health..."
          sleep 10
          
          # Test a simple endpoint
          if curl -f -s -o /dev/null -w "%{http_code}" http://localhost:8080/ | grep -q "200\|404"; then
            echo "✅ Application is responding on port 8080"
          else
            echo "❌ Application is not responding. Check logs above."
            echo "🔍 Process status:"
            ps aux | grep java || echo "No Java processes found"
            echo "🔍 Port status:"
            sudo netstat -tlnp | grep 8080 || echo "Port 8080 not in use"
          fi
          
          # Check if New Relic agent is working
          echo "🔍 Checking New Relic agent initialization..."
          sudo journalctl -u springboot-app | grep -i "new relic" | tail -5 || echo "No New Relic logs found yet"
          
          echo "🎯 Resource-Constrained Application Deployment complete!"
          echo "⚠️  RESOURCE CONSTRAINTS ACTIVE:"
          echo "   • JVM Heap: 150MB max (was ~400MB)"
          echo "   • System Memory: 200MB limit"
          echo "   • CPU: 40% quota"
          echo "   • DB Connections: 2 max (was 10)"
          echo "   • Tomcat Threads: 3 max (was 200)"
          echo "   • Max Connections: 5 (was 8192)"
          echo ""
          echo "📋 Useful commands for monitoring during load tests:"
          echo "  sudo systemctl status springboot-app     # Check status"
          echo "  sudo systemctl restart springboot-app    # Restart service"  
          echo "  sudo journalctl -u springboot-app -f     # Follow logs"
          echo "  top -p \$(pgrep java)                     # Monitor Java process resources"
          echo "  free -h                                   # Check system memory"
          echo "  curl -X POST 'http://localhost:8080/greet?name=TestUser'  # Test endpoint"